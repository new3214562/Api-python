import nextcord
import json
import os
import requests
from nextcord.ext import commands
from nextcord.ui import Button, View, Modal, TextInput

intents = nextcord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

DATA_FILE = "data.json"
LOG_CHANNEL_ID = 1342856050172493926  # ‡πÉ‡∏™‡πà ID ‡∏ä‡πà‡∏≠‡∏á log ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w") as f:
            json.dump({"roles": {}, "users": {}}, f)
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

data = load_data()

class AdminAddPointsModal(Modal):
    def __init__(self):
        super().__init__(title="‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå (Admin)")
        self.user_id = TextInput(label="ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", placeholder="‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", required=True)
        self.points = TextInput(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå", placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°", required=True)

        self.add_item(self.user_id)
        self.add_item(self.points)

    async def callback(self, interaction: nextcord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ!", ephemeral=True)
            return

        try:
            user_id = self.user_id.value.strip()
            points = int(self.points.value.strip())

            if user_id not in data["users"]:
                data["users"][user_id] = {"points": 0}

            data["users"][user_id]["points"] += points
            save_data(data)

            user = interaction.guild.get_member(int(user_id))
            if user:
                await user.send(f"‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô `{points}` ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå")
                
            await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÉ‡∏´‡πâ <@{user_id}> ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô `{points}` ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", ephemeral=True)

            log_channel = bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(f"**‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô {interaction.user.mention} ‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÉ‡∏´‡πâ <@{user_id}> ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô `{points}` ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå!**")

        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç!", ephemeral=True)
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
            await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)


class AdminAddPointsButton(Button):
    def __init__(self):
        super().__init__(label="‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå (Admin)", style=nextcord.ButtonStyle.danger, custom_id="admin_add_points_button")

    async def callback(self, interaction: nextcord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ!", ephemeral=True)
            return

        await interaction.response.send_modal(AdminAddPointsModal())
        
class AddRoleModal(Modal):
    def __init__(self):
        super().__init__(title="‡πÄ‡∏û‡∏¥‡πà‡∏° Role ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢")
        self.role_id = TextInput(label="ID Role", placeholder="‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏Ç‡∏≠‡∏á Role", required=True)
        self.name = TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏®", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢", required=True)
        self.price = TextInput(label="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå)", placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤", required=True)

        self.add_item(self.role_id)
        self.add_item(self.name)
        self.add_item(self.price)

    async def callback(self, interaction: nextcord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", ephemeral=True)

        role_id, name, price = self.role_id.value, self.name.value, self.price.value

        try:
            price = int(price)
            role = interaction.guild.get_role(int(role_id))
            if not role:
                return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Role", ephemeral=True)

            data["roles"][role_id] = {"name": name, "price": price}
            save_data(data)

            await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

class AddRoleButton(Button):
    def __init__(self): super().__init__(label="‡πÄ‡∏û‡∏¥‡πà‡∏° Role", style=nextcord.ButtonStyle.green)

    async def callback(self, interaction): await interaction.response.send_modal(AddRoleModal())

class ListRolesButton(Button):
    def __init__(self): super().__init__(label="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Role", style=nextcord.ButtonStyle.gray)

    async def callback(self, interaction):
        embed = nextcord.Embed(title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Role ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢", color=0x3498db)
        for rid, info in data["roles"].items():
            embed.add_field(name=info["name"], value=f"‡∏£‡∏≤‡∏Ñ‡∏≤: {info['price']} ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå", inline=False)
        await interaction.response.send_message(embed=embed, ephemeral=True)

class BuyRoleModal(Modal):
    def __init__(self): 
        super().__init__(title="‡∏ã‡∏∑‡πâ‡∏≠ Role")
        self.name = TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏®", placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠")
        self.add_item(self.name)

    async def callback(self, interaction):
        user_id = str(interaction.user.id)
        role_name = self.name.value.strip()
        role_id = next((rid for rid, info in data["roles"].items() if info["name"] == role_name), None)
        if not role_id:
            return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏®‡∏ô‡∏µ‡πâ", ephemeral=True)

        role = interaction.guild.get_role(int(role_id))
        price = data["roles"][role_id]["price"]
        if data["users"].get(user_id, {"points": 0})["points"] < price:
            return await interaction.response.send_message(f"‚ùå ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {price} ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå", ephemeral=True)

        await interaction.user.add_roles(role)
        data["users"][user_id]["points"] -= price
        save_data(data)

        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        await log_channel.send(f"‚úÖ {interaction.user} ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏® {role.name} ‡∏£‡∏≤‡∏Ñ‡∏≤ {price} ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå")

        await interaction.response.send_message(f"‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", ephemeral=True)

class BuyRoleButton(Button):
    def __init__(self): super().__init__(label="‡∏ã‡∏∑‡πâ‡∏≠ Role", style=nextcord.ButtonStyle.blurple)

    async def callback(self, interaction): await interaction.response.send_modal(BuyRoleModal())

class CheckPointsButton(Button):
    def __init__(self): super().__init__(label="‡∏î‡∏π‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå", style=nextcord.ButtonStyle.secondary)

    async def callback(self, interaction):
        points = data["users"].get(str(interaction.user.id), {"points": 0})["points"]
        await interaction.response.send_message(f"‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ {points} ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå", ephemeral=True)

class TopUpModal(Modal):
    def __init__(self):
        super().__init__(title="‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå")
        self.link = TextInput(label="‡∏•‡∏¥‡∏á‡∏Å‡πå Gift", placeholder="‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å TrueMoney Wallet")
        self.add_item(self.link)

    async def callback(self, interaction):
        phone = "0802672257"
        response = requests.post(f"https://gift.truemoney.com/campaign/vouchers/{self.link.value}/redeem", data={"mobile": phone}).json()

        if response.get("status") == "SUCCESS":
            amount = response["amount"]
            data["users"].setdefault(str(interaction.user.id), {"points": 0})["points"] += amount
            save_data(data)

            log_channel = bot.get_channel(LOG_CHANNEL_ID)
            await log_channel.send(f"‚úÖ {interaction.user} ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {amount} ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå")

            await interaction.response.send_message(f"‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {amount} ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", ephemeral=True)

class TopUpButton(Button):
    def __init__(self): super().__init__(label="‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå", style=nextcord.ButtonStyle.primary)

    async def callback(self, interaction): await interaction.response.send_modal(TopUpModal())

@bot.command()
async def main(ctx):
    if not ctx.author.guild_permissions.administrator:
        return await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")

    view = View()
    view.add_item(AdminAddPointsButton())
    view.add_item(AddRoleButton())
    view.add_item(BuyRoleButton())
    view.add_item(TopUpButton())
    view.add_item(CheckPointsButton())
    view.add_item(ListRolesButton())

    embed = nextcord.Embed(
        title="üíé ‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏¢‡∏® - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå",
        description=(
            "üîπ **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**\n"
            "‚ûñ ‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n"
            "‚ûñ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n"
            "‚ûñ ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå\n"
            "‚ûñ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n"
            "‚ö° **‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π**\n"
            "üîπ `‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå` - ‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö\n"
            "üîπ `‡∏î‡∏π‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå` - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n"
            "üîπ `‡∏ã‡∏∑‡πâ‡∏≠ Role` - ‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n"
            "üîπ `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Role` - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢\n"
        ),
        color=0x1abc9c
    )

    embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/1058504363036917920/1345465194775576596/Bael.png?ex=67c4a59b&is=67c3541b&hm=f1e88359c483cc1e13c54bd25a33b3f1997fab29dadf9b53f559e14584aee5a2&")  # ‡πÉ‡∏™‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    embed.set_footer(text="üìå ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡∏ó‡∏µ‡∏° Dev", icon_url="https://cdn-icons-png.flaticon.com/512/1828/1828640.png")  # ‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
    embed.set_author(name="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏¢‡∏®", icon_url=ctx.guild.icon.url if ctx.guild.icon else None)  # ‡πÉ‡∏™‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå

    await ctx.send(embed=embed, view=view)

@bot.event
async def on_ready():
    print(f"Bot {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    await bot.change_presence(activity=nextcord.Game("‡∏Ç‡∏≤‡∏¢‡∏¢‡∏®"))

bot.run("MTEzMDUyMTUwNjgxMjgwNTE5MA.GlwWBx.eDPahVoXKDvEqjwTkx4U-KvlKnrcC-_Hdkd6M0")
